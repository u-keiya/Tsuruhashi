openapi: 3.1.0
info:
  title: Bot Control API
  version: 0.1.0
  description: |
    Minecraft Bedrock Bot Framework Control API
    USDM: #US-001 #US-002 #US-003 #US-004 #US-005
servers:
  - url: http://localhost:8080
    description: Local Dev
tags:
  - name: Bot
    description: Bot lifecycle & mining control
components:
  schemas:
    Coord:
      type: object
      properties:
        x: { type: integer, example: 100 }
        y: { type: integer, example: 64 }
        z: { type: integer, example: -20 }
      required: [x, y, z]
    MiningArea:
      type: object
      properties:
        start: { $ref: '#/components/schemas/Coord' }
        end:   { $ref: '#/components/schemas/Coord' }
      required: [start, end]
    BotSummary:
      type: object
      properties:
        id: { type: string, format: uuid, example: "d6a7f..." }
        state: { type: string, enum: [Idle, Moving, Mining, ToolSwap] }
      required: [id, state]
    BotHealthDTO:
      type: object
      properties:
        status:
          type: string
          enum: [connected, disconnected]
        lastSeenAt:
          type: string
          format: date-time
      required: [status, lastSeenAt]
    PluginSpec:
      type: object
      properties:
        name:
          type: string
          example: "auto-mining"
        options:
          type: object
          additionalProperties: true
      required: [name]
    ErrorResponse:
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
              example: "B006"
            message:
              type: string
              example: "Bot not connected"
          required: [code, message]
      required: [error]
paths:
  /bots/summon:
    post:
      summary: Summon new bot  #US-001-1
      tags: [Bot]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                playerId: { type: string }
              required: [playerId]
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema: { $ref: '#/components/schemas/BotSummary' }
  /bots/{botId}/area:
    post:
      summary: Set mining area  #US-001-2
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/MiningArea' }
      responses:
        '202':
          description: Accepted
  /bots/{botId}/start:
    post:
      summary: Start mining  #US-001-4
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '202':
          description: Accepted
        '503':
          description: Bot not connected
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                BotNotConnected:
                  value:
                    error:
                      code: B006
                      message: Bot not connected
  /bots/{botId}/stop:
    post:
      summary: Stop mining
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '202': { description: Accepted }
  /bots/{botId}/progress:
    get:
      summary: Get progress & tool status  #US-004
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  progress: { type: number, format: float, example: 42.3 }
                  minedBlocks: { type: integer, example: 1234 }
                  durability: { type: integer, example: 87 }
                  maxDurability: { type: integer, example: 2031 }
                  toolCount: { type: integer, example: 5 }
  /bots/{botId}/plugins/load:
    post:
      summary: Load plugin into bot
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: '#/components/schemas/PluginSpec' }
      responses:
        '202': { description: Accepted }
  /bots/{botId}:
    delete:
      summary: Delete bot permanently  #US-005
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '204':
          description: No Content – Bot deleted
        '403':
          description: Forbidden – requires Admin role
        '404':
          description: Not Found
  /bots/{botId}/plugins/unload:
    post:
      summary: Unload plugin from bot
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name: { type: string, example: "auto-mining" }
              required: [name]
      responses:
        '202': { description: Accepted }

  /bots/{botId}/health:
    get:
      summary: Get bot health status  #US-002-3
      operationId: getBotHealth
      tags: [Bot]
      parameters:
        - name: botId
          in: path
          required: true
          schema: { type: string, format: uuid }
      responses:
        '200':
          description: Bot health information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BotHealthDTO'
              examples:
                connected:
                  value: { status: connected, lastSeenAt: '2025-08-24T02:50:00Z' }
                disconnected:
                  value: { status: disconnected, lastSeenAt: '2025-08-24T02:45:30Z' }
        '404':
          description: Bot not found
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }
        '503':
          description: Bot not connected
          content:
            application/json:
              schema: { $ref: '#/components/schemas/ErrorResponse' }